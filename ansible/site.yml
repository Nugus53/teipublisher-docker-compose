- name: Install
  hosts: all
  vars_files:
    - ./variables.yml
  vars_prompt:
    - name: admin_pass
      prompt: Provide a password for the eXist-db admin user
      default: ""
  tasks:
    - name: Check for existing installation
      ansible.builtin.stat:
        path: "{{dest}}"
      register: avail
    - name: Stop docker
      ansible.builtin.shell:
        cmd: docker compose down
        chdir: "{{dest}}"
      when: avail.stat.isdir is defined and avail.stat.isdir
      ignore_errors: true
    - name: Prune volumes
      ansible.builtin.shell:
        cmd: docker volume prune -a -f
        chdir: "{{dest}}"
      when: avail.stat.isdir is defined and avail.stat.isdir
      ignore_errors: true
    - name: Remove existing directory
      when: avail.stat.isdir is defined and avail.stat.isdir
      ansible.builtin.file:
        path: "{{dest}}"
        state: absent
      tags:
        - clean
    - name: Create directory
      ansible.builtin.file:
        path: "{{dest}}/nginx/conf"
        state: directory
    - name: Copy files
      ansible.builtin.copy:
        src: '{{ item.src }}'
        dest: '{{ item.dest }}'
      loop:
        - { src: ../nginx/conf/upstream.conf, dest: "{{dest}}/nginx/conf" }
        - { src: ../.env, dest: "{{dest}}" }
        - { src: ../certbot-renew.sh, dest: "{{dest}}" }
        - { src: ../iiif, dest: "{{dest}}" }
      tags:
        - copy
    - name: Generate Dockerfile and docker-compose.yml
      block:
        - name: Generate Dockerfile and docker-compose.yml from template
          connection: local
          ansible.builtin.template:
            src: "{{ item.src }}"
            dest: "{{ item.dest }}"
          loop:
            - { src: Dockerfile.njk, dest: "{{playbook_dir}}/Dockerfile.generated" }
            - { src: docker-compose.yml.njk, dest: "{{playbook_dir}}/docker-compose.yml.generated"}
        - name: Copy generated files to server
          ansible.builtin.copy:
            src: "{{ item.src }}"
            dest: "{{ item.dest }}"
          loop:
            - { src: "{{playbook_dir}}/Dockerfile.generated", dest: "{{dest}}/Dockerfile" }
            - { src: "{{playbook_dir}}/docker-compose.yml.generated", dest: "{{dest}}/docker-compose.yml" }
    - name: Create nginx configs
      ansible.builtin.template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
      loop:
        - { src: upstream.conf.njk, dest: "{{dest}}/nginx/conf/upstream.conf" }
        - { src: default.conf.njk, dest: "{{dest}}/nginx/conf/default.conf" }
        - { src: default.ssl.conf.njk, dest: "{{dest}}/nginx/conf/default.ssl.conf.off" }
      tags:
        - frontend
    - name: Build docker images
      ansible.builtin.shell:
        cmd: docker compose build --no-cache --pull
        chdir: "{{dest}}"
      environment:
        BUILD_CONTEXT: "{{ publisher.build.context }}"
        CONTEXT_PATH: "{{publisher.context_path}}"
    - name: Launch HTTP
      ansible.builtin.shell:
        cmd: docker compose up -d --force-recreate
        chdir: "{{dest}}"
      environment:
        IIIF_IMAGES: "{{iiif.images}}"
      tags:
        - launch
    - name: Wait for eXist-db
      ansible.builtin.shell:
        cmd: docker compose exec publisher java org.exist.start.Main client -x 'system:get-version()'
        chdir: "{{dest}}"
      register: result
      until: result.rc == 0
      retries: 5
      delay: 10
      tags:
        - password
    - name: Set admin password
      ansible.builtin.shell:
        cmd: docker compose exec publisher java org.exist.start.Main client -x 'sm:passwd("admin", "{{admin.password}}")'
        chdir: "{{dest}}"
      when: admin.password is defined and admin.password != ''
      tags:
        - password
    - name: Acquire certificates
      ansible.builtin.shell:
        cmd: docker compose run --rm  certbot certonly {{"--test-cert" if cert.use_staging}} --webroot --webroot-path /var/www/certbot/ -n --agree-tos -m {{cert.email}} -d {{item.hostname}}
        chdir: "{{dest}}"
      loop: "{{domains}}"
      tags:
        - cert
    - name: Enable HTTPS
      ansible.builtin.copy:
        src: "{{dest}}/nginx/conf/default.ssl.conf.off"
        dest: "{{dest}}/nginx/conf/default.ssl.conf"
        remote_src: true
    - name: Restart frontend
      ansible.builtin.shell:
        cmd: docker compose restart frontend
        chdir: "{{dest}}"
    - name: Add cronjob for certificate renewal
      ansible.builtin.cron:
        name: "Renew certificate"
        hour: "3"
        minute: "0"
        weekday: "1"
        job: "{{dest}}/certbot-renew.sh"
    - import_tasks: check.yml